package project.week3;

import java.util.Date;
import java.util.Scanner;
import java.util.Stack;

/**
 * Quicksort with and without recursion.
 * @author Zhiwei Qiao, Hao Ai, Haoyang Tian
 * 2015-9-15 16:37:19
 */

public class Quicksort {

	//====================Recursive Function====================
	public static void quicksort(int[] data, int lo, int hi){
		//End the recursion
		if(hi-lo<1)
			return;
		//Initialization
		int pivot=data[lo];  //Designate the leftmost element in the array as pivot.
		int leftmostIndex=lo;      //Hold the boundary of sub-array
		int rightmostIndex=hi;      //Hold the boundary of sub-array
		//Core algorithm
		while(hi-lo!=0){
			while(data[hi]>=pivot && hi-lo!=0)
				hi--;
			int temp=data[hi];
			data[hi]=data[lo];
			data[lo]=temp;
			
			while(data[lo]<=pivot && hi-lo!=0)
				lo++;
			temp=data[hi];
			data[hi]=data[lo];
			data[lo]=temp;
		}
		quicksort(data,leftmostIndex,lo-1);
		quicksort(data,lo+1,rightmostIndex);
	}
	
	//==================Non-recursive Function==================
	public static void quicksortWithoutRecursion(int[] data){
		//Initialization
		Stack<Integer> startStack=new Stack<Integer>();
		Stack<Integer> endStack=new Stack<Integer>();
		Integer start=0, end=data.length-1;
		Integer pivot, temp, leftmost, rightmost;
		startStack.push(start);
		endStack.push(end);
		//Core algorithm-use "while-loop" instead of recursion
		while(!startStack.isEmpty()){
			start=startStack.pop();
			end=endStack.pop();
			leftmost=start;    //Hold the boundary of sub-array
			rightmost=end;    //Hold the boundary of sub-array
			pivot=data[start];  //Designate the leftmost element in the array as pivot.
			while(start.intValue()!=end.intValue()){
				while(data[end] >= pivot && start.intValue()!=end.intValue()){
					end--;
				}
				temp=data[start];
				data[start]=data[end];
				data[end]=temp;
				while(data[start] <= pivot && start.intValue()!=end.intValue()){
					start++;
				}
				temp=data[start];
				data[start]=data[end];
				data[end]=temp;
			}
			if(leftmost < start-1){
				startStack.push(leftmost);
				endStack.push(start-1);
			}
			if(rightmost > start+1){
				startStack.push(start+1);
				endStack.push(rightmost);
			}
		}
	}
	
	public static void main(String[] args) {
		//Initialization
		System.out.println("===========THIS IS A QUICKSORT PROGRAM===========\n");
		System.out.println("===========@author Zhiwei Qiao, Hao Ai, Haoyang Tian===========\n");
		String choice="NONE";
		String again="Y";
		Date beforeGeneration=null;
		Date afterGeneration=null;
		Scanner sc=new Scanner(System.in);
		int[] inputDataInt;
		
		while(again.equalsIgnoreCase("Y")){
			//Make a choice
			while(!choice.equalsIgnoreCase("Y") && !choice.equalsIgnoreCase("N")){
				System.out.println("===========================================================================");
				System.out.println("Would you like to generate some random numbers with the help of computer? (Y/N) ");
				System.out.println("===========================================================================");
				choice=sc.next();
				if(!choice.equalsIgnoreCase("Y") && !choice.equalsIgnoreCase("N")){
					System.out.println("==============================");
					System.out.println("Please enter a right letter.");
					System.out.println("==============================");
				}
			}
			
			//Choice 1: Random number, generated by computer.
			if(choice.equalsIgnoreCase("Y")){
				System.out.println("====================================");
				System.out.println("How many numbers do you want?");
				System.out.println("====================================");
				int count=sc.nextInt();
				inputDataInt=new int[count];
				System.out.println("===========================================");
				System.out.println("What is the maximum of these numbers?");
				System.out.println("===========================================");
				int max=sc.nextInt();
				
				//Generate random numbers
				beforeGeneration=new Date();
				System.out.println("=====================================");
				System.out.println("Numbers generated by computer:");
				for (int i = 0; i < count; i++) {
					inputDataInt[i]=(int)(Math.random()*(max+1));
					System.out.print(inputDataInt[i]);
					if(i!=count-1)
						System.out.print(",");
					else
						System.out.println();
				}
				afterGeneration=new Date();
				
			}else{//Choice 2: Type numbers by client.
				System.out.println("===========================================================================");
				System.out.println("Please input any serial integer numbers and divide them by comma, such as '21,33,2,41,76,22,15'.");
				System.out.println("===========================================================================");
				String inputData=sc.next();
				
				//Convert data into array, and turn it from String type into Integer type
				String[] inputDataString=inputData.split(",");
				inputDataInt=new int[inputDataString.length];
				for (int i=0;i<inputDataString.length;i++) {
					try {
						inputDataInt[i]=Integer.parseInt(inputDataString[i]);
					} catch (java.lang.NumberFormatException e) {
						System.out.println("===============================================================");
						System.err.println("PLEASE MAKE SURE YOU HAVE TYPED WITH RIGHT FORMAT!!");
						System.out.println("===============================================================");
					}
				}
			}
			System.out.println("===========================================================================");
			System.out.println("Which function do you want to use, Recursive Function(R) or Non-recursive function(N)? (R/N)");
			System.out.println("===========================================================================");
			Date before;
			if(sc.next().equalsIgnoreCase("R")){
				//Function invocation and time calculator
				before=new Date();
				quicksort(inputDataInt,0,inputDataInt.length-1);
				System.out.println("----------------You have chosen Recursive Function----------------");
			}else {
				//Function invocation and time calculator
				before=new Date();
				quicksortWithoutRecursion(inputDataInt);
				System.out.println("----------------You have chosen Non-recursive Function----------------");
			}
			Date after=new Date();
			
			//Result display
			System.out.print("RESULT: ");
			for (int i=0;i<inputDataInt.length;i++) {
				System.out.print(inputDataInt[i]);
				if(i!=inputDataInt.length-1)
					System.out.print(",");
				else
					System.out.println();
			}
			if(afterGeneration!=null && beforeGeneration!=null){
				System.out.println("Time consumed on generating is: "+(afterGeneration.getTime()-beforeGeneration.getTime())+"ms");
			}
			System.out.println("Time consumed on sorting is: "+(after.getTime()-before.getTime())+"ms");
			System.out.println("==================================");
			System.out.println("Do you want to try again? (Y/N)");
			System.out.println("==================================");
			again=sc.next();
			
			//Initiate again
			choice="NONE";
			afterGeneration=null;
			beforeGeneration=null;
		}
		sc.close();
		System.out.println("BYE~");
	}
}
